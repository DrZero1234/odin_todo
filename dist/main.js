(()=>{"use strict";var n={890:(n,e,t)=>{t.d(e,{Z:()=>A});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,'html, body {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: minmax(auto,400px) minmax(250px,1fr);\n    grid-template-rows: min-content 1fr  min-content;\n    grid-template-areas: "header header"\n                         "sidebar main"\n                         "sidebar main"\n                         "footer footer"\n\n}\n\n/* HIDE ELEMENTS WHILE TOGGLING */\n.inactive {\n    display: none;\n}\n\n\n.page-header {\n    grid-area: header;\n    display: flex;\n    align-items: center;\n    padding: 12px;\n    background-color: #0284C7;\n}\n\n.page-header > img {\n    margin-left: 45px;\n    height: 108px;\n}\n\n.sidebar,.main {\n    min-height: 100vh;\n}\n\n\n.sidebar {\n    display: flex;\n    grid-area: sidebar;\n    max-width: 1fr;\n    margin-top: 30px;\n    background-color: #0284C7;\n}\n\n.sidebar * {\n    cursor: pointer;\n}\n\nhx {\n    cursor: pointer;\n}\n\n#options {\n    list-style-type: none;\n}\n\n#project-list {\n    cursor: pointer;\n    word-break: break-all;\n    list-style-type: none;\n}\n\n\n/* Project text */\n\n#project-list > li {\n    list-style-type: none;\n}\n\n\n\n.main {\n    padding: 50px 220px;\n    grid-area: main;\n}\n\n.todo-wrapper {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 1rem;\n    \n}\n\n.todo-wrapper button {\n    background-color: #0284C7;\n    color: white;\n    width: fit-content;\n    font-weight: 800;\n    font-size: 24px;\n    padding: 6px;\n    cursor: pointer;\n}\n\n.todo-wrapper button:hover {\n    color: #0284C7;\n    background-color: white;\n}\n\n.todos {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n\n.todo {\n    display: flex;\n    flex: 1;\n    align-items: center;\n    justify-content: space-between;\n    border: 2px solid red;\n    padding: 0px 8px;\n}\n\n#todo-title,#todo-description {\n    word-break: break-all;\n}\n\n#priority {\n    font-size: 36px;\n    color: red;\n    font-weight: 800;\n}\n\n.todo-actions {\n    display: flex;\n    gap: 10px;\n}\n\n.todo-actions img {\n    height: 32px;\n}\n\n.todo-actions:hover {\n    cursor: pointer;\n}\n\nfooter {\n    grid-area: footer;\n    position: relative;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    padding: 20px;\n    text-align: center;\n    background-color: #000;\n    color: #fff\n}\n\n.modal {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%,-50%) scale(0);\n    transition: 200ms ease-in-out;\n    border: 1px solid black;\n    border-radius: 12px;\n    z-index: 10;\n    background-color: white;\n    width: 500px;\n    max-width: 80%;\n}\n\n.modal.active {\n    transform: translate(-50%,-50%) scale(1);\n}\n\n.modal-header {\n    padding: 10px 15px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid black;\n}\n\n.modal-header .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n}\n\n.modal-header .close-button {\n    border: none;\n    outline: none;\n    cursor: pointer;\n    background: none;\n    font-size: 2rem;\n    font-weight: bold;\n}\n\n.modal-body {\n    padding: 10px 15px;\n}\n\n.modal-body form {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.modal-body form button {\n    min-width: 10%;\n    max-width: 20%;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0; \n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, .5);\n    pointer-events: none;\n    transition: 200ms ease-in-out;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}',"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,2DAA2D;IAC3D,gDAAgD;IAChD;;;;;AAKJ;;AAEA,iCAAiC;AACjC;IACI,aAAa;AACjB;;;AAGA;IACI,iBAAiB;IACjB,aAAa;IACb,mBAAmB;IACnB,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,iBAAiB;AACrB;;;AAGA;IACI,aAAa;IACb,kBAAkB;IAClB,cAAc;IACd,gBAAgB;IAChB,yBAAyB;AAC7B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,qBAAqB;IACrB,qBAAqB;AACzB;;;AAGA,iBAAiB;;AAEjB;IACI,qBAAqB;AACzB;;;;AAIA;IACI,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;;AAEvB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,OAAO;IACP,eAAe;IACf,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,OAAO;IACP,mBAAmB;IACnB,8BAA8B;IAC9B,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,OAAO;IACP,aAAa;IACb,kBAAkB;IAClB,sBAAsB;IACtB;AACJ;;AAEA;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,wCAAwC;IACxC,6BAA6B;IAC7B,uBAAuB;IACvB,mBAAmB;IACnB,WAAW;IACX,uBAAuB;IACvB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,8BAA8B;AAClC;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,eAAe;IACf,gBAAgB;IAChB,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,cAAc;IACd,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,SAAS;IACT,QAAQ;IACR,mCAAmC;IACnC,oBAAoB;IACpB,6BAA6B;AACjC;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB",sourcesContent:['html, body {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: minmax(auto,400px) minmax(250px,1fr);\n    grid-template-rows: min-content 1fr  min-content;\n    grid-template-areas: "header header"\n                         "sidebar main"\n                         "sidebar main"\n                         "footer footer"\n\n}\n\n/* HIDE ELEMENTS WHILE TOGGLING */\n.inactive {\n    display: none;\n}\n\n\n.page-header {\n    grid-area: header;\n    display: flex;\n    align-items: center;\n    padding: 12px;\n    background-color: #0284C7;\n}\n\n.page-header > img {\n    margin-left: 45px;\n    height: 108px;\n}\n\n.sidebar,.main {\n    min-height: 100vh;\n}\n\n\n.sidebar {\n    display: flex;\n    grid-area: sidebar;\n    max-width: 1fr;\n    margin-top: 30px;\n    background-color: #0284C7;\n}\n\n.sidebar * {\n    cursor: pointer;\n}\n\nhx {\n    cursor: pointer;\n}\n\n#options {\n    list-style-type: none;\n}\n\n#project-list {\n    cursor: pointer;\n    word-break: break-all;\n    list-style-type: none;\n}\n\n\n/* Project text */\n\n#project-list > li {\n    list-style-type: none;\n}\n\n\n\n.main {\n    padding: 50px 220px;\n    grid-area: main;\n}\n\n.todo-wrapper {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 1rem;\n    \n}\n\n.todo-wrapper button {\n    background-color: #0284C7;\n    color: white;\n    width: fit-content;\n    font-weight: 800;\n    font-size: 24px;\n    padding: 6px;\n    cursor: pointer;\n}\n\n.todo-wrapper button:hover {\n    color: #0284C7;\n    background-color: white;\n}\n\n.todos {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    flex-wrap: wrap;\n    gap: 6px;\n}\n\n.todo {\n    display: flex;\n    flex: 1;\n    align-items: center;\n    justify-content: space-between;\n    border: 2px solid red;\n    padding: 0px 8px;\n}\n\n#todo-title,#todo-description {\n    word-break: break-all;\n}\n\n#priority {\n    font-size: 36px;\n    color: red;\n    font-weight: 800;\n}\n\n.todo-actions {\n    display: flex;\n    gap: 10px;\n}\n\n.todo-actions img {\n    height: 32px;\n}\n\n.todo-actions:hover {\n    cursor: pointer;\n}\n\nfooter {\n    grid-area: footer;\n    position: relative;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    padding: 20px;\n    text-align: center;\n    background-color: #000;\n    color: #fff\n}\n\n.modal {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%,-50%) scale(0);\n    transition: 200ms ease-in-out;\n    border: 1px solid black;\n    border-radius: 12px;\n    z-index: 10;\n    background-color: white;\n    width: 500px;\n    max-width: 80%;\n}\n\n.modal.active {\n    transform: translate(-50%,-50%) scale(1);\n}\n\n.modal-header {\n    padding: 10px 15px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: 1px solid black;\n}\n\n.modal-header .title {\n    font-size: 1.25rem;\n    font-weight: bold;\n}\n\n.modal-header .close-button {\n    border: none;\n    outline: none;\n    cursor: pointer;\n    background: none;\n    font-size: 2rem;\n    font-weight: bold;\n}\n\n.modal-body {\n    padding: 10px 15px;\n}\n\n.modal-body form {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.modal-body form button {\n    min-width: 10%;\n    max-width: 20%;\n}\n\n#overlay {\n    position: fixed;\n    opacity: 0; \n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, .5);\n    pointer-events: none;\n    transition: 200ms ease-in-out;\n}\n\n#overlay.active {\n    opacity: 1;\n    pointer-events: all;\n}'],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var A=0;A<this.length;A++){var d=this[A][0];null!=d&&(a[d]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],A=0;A<n.length;A++){var d=n[A],s=o.base?d[0]+o.base:d[0],c=i[s]||0,l="".concat(s," ").concat(c);i[s]=c+1;var p=t(l),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=r(u,o);o.byIndex=A,e.splice(A,0,{identifier:l,updater:m,references:1})}a.push(l)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var A=t(i[a]);e[A].references--}for(var d=o(n,r),s=0;s<i.length;s++){var c=t(i[s]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=d}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),i=t(569),a=t.n(i),A=t(565),d=t.n(A),s=t(216),c=t.n(s),l=t(589),p=t.n(l),u=t(890),m={};m.styleTagTransform=p(),m.setAttributes=d(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=c(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;var f,C=new Uint8Array(16);function g(){if(!f&&!(f="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return f(C)}const I=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,B=function(n){return"string"==typeof n&&I.test(n)};for(var h=[],b=0;b<256;++b)h.push((b+256).toString(16).substr(1));const x=function(n,e,t){var o=(n=n||{}).random||(n.rng||g)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){t=t||0;for(var r=0;r<16;++r)e[t+r]=o[r];return e}return function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(h[n[e+0]]+h[n[e+1]]+h[n[e+2]]+h[n[e+3]]+"-"+h[n[e+4]]+h[n[e+5]]+"-"+h[n[e+6]]+h[n[e+7]]+"-"+h[n[e+8]]+h[n[e+9]]+"-"+h[n[e+10]]+h[n[e+11]]+h[n[e+12]]+h[n[e+13]]+h[n[e+14]]+h[n[e+15]]).toLowerCase();if(!B(t))throw TypeError("Stringified UUID is invalid");return t}(o)};class y{constructor(n){this.id=x(),this.project_todos=new Object,this.name=n}storeProject(){return localStorage.setItem(this.id,JSON.stringify(this)),this}pushTodo(n){this.project_todos[n.id]=JSON.stringify(n),localStorage.setItem(this.id,JSON.stringify(this))}}class v{constructor(n,e,t,o,r="unfinished"){this.id=x(),this.title=n,this.description=e,this.date=t,this.priority=o,this.status=r}}function E(){const n=[];for(let e of w())for(let t of Object.keys(e.project_todos))n.push(JSON.parse(e.project_todos[t]));return n}function w(){let n=[];return Object.keys(localStorage).forEach((e=>{n.push(JSON.parse(localStorage.getItem(e)))})),n}function k(n){for(let e of w())if(e.id===n)return e}function j(n){let e=[];return Object.keys(k(n).project_todos).forEach((t=>{e.push(JSON.parse(k(n).project_todos[t]))})),e}document.addEventListener("DOMContentLoaded",(()=>{})),E();const S=(n=e)=>{const e=document.querySelector(".todos");for(;n.firstChild;)n.removeChild(n.lastChild)},O=(n=E())=>{const e=document.querySelector(".todos");S(e),n.forEach((n=>{const t=document.createElement("div");t.className="todo",t.id=n.id;const o=document.createElement("span");o.id="priority","urgent"===n.priority&&(o.textContent="!");const r=document.createElement("h3");r.id="todo-title",r.textContent=n.title;const i=document.createElement("span");i.id="todo-description",i.textContent=n.description;const a=document.createElement("span");a.id="todo",a.textContent=n.date;const A=document.createElement("div");A.className="todo-actions";const d=document.createElement("img");d.id="edit-todo",d.setAttribute("src","edit.png"),d.setAttribute("alt","Edit");const s=document.createElement("img");s.id="del-todo",s.setAttribute("src","delete.png"),s.setAttribute("alt","Delete"),A.appendChild(d),A.appendChild(s),t.appendChild(o),t.appendChild(r),t.appendChild(i),t.appendChild(a),t.appendChild(A),e.appendChild(t)}))};document.addEventListener("DOMContentLoaded",(()=>{(function(){localStorage.clear();let n=new y("Project1"),e=new y("Project2"),t=new v("Todo1","First todo","2022-12-31","normal"),o=new v("Todo2","Second todo","1939-09-01","urgent");n.storeProject(),e.storeProject(),n.pushTodo(t),n.pushTodo(o),e.pushTodo(t)})(),console.log("Projects"),console.log(w()[0].project_todos),console.log("Project Todos"),console.log(j(w()[0].id)),console.log("Todos"),console.log(E()),(()=>{document.querySelector(".todos");const n=document.getElementById("project-list"),e=w();S(n);const t=document.createElement("button");t.id="new-project-btn",t.textContent="New Project",n.appendChild(t),e.forEach((e=>{const t=document.createElement("li");t.textContent=e.name,t.id=e.id,t.addEventListener("click",(()=>{const n=j(e.id);O(n),document.getElementById("todos-title").textContent=e.name})),n.appendChild(t)}))})();const n=document.getElementById("sidebar-todos"),e=document.getElementById("projects"),t=document.getElementById("project-list"),o=t.querySelectorAll("li");console.log(t),e.addEventListener("click",(()=>{var n;"active"===(n=t).className?n.className="inactive":n.className="active"})),n.addEventListener("click",(()=>{O(),document.getElementById("todos-title").textContent="Every Todos"})),console.log(o),O()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFRQyxJQUFJVSxHQUdaN0IsUSIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW5fdG9kby8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzIiwid2VicGFjazovL29kaW5fdG9kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL29kaW5fdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL29kaW5fdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9vZGluX3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9vZGluX3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9vZGluX3RvZG8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL29kaW5fdG9kby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9vZGluX3RvZG8vLi9zcmMvc3R5bGVzL3N0eWxlLmNzcz9mZjk0Iiwid2VicGFjazovL29kaW5fdG9kby8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL29kaW5fdG9kby8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly9vZGluX3RvZG8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9vZGluX3RvZG8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL29kaW5fdG9kby8uL3NyYy9mdW5jdGlvbnMvdG9kb0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vb2Rpbl90b2RvLy4vc3JjL2Z1bmN0aW9ucy9zdG9yYWdlLmpzIiwid2VicGFjazovL29kaW5fdG9kby8uL3NyYy9mdW5jdGlvbnMvRE9NRnVuY3Rpb25zLmpzIiwid2VicGFjazovL29kaW5fdG9kby8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsIGJvZHkge1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heChhdXRvLDQwMHB4KSBtaW5tYXgoMjUwcHgsMWZyKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW4tY29udGVudCAxZnIgIG1pbi1jb250ZW50O1xcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcXFwiaGVhZGVyIGhlYWRlclxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgXFxcInNpZGViYXIgbWFpblxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgXFxcInNpZGViYXIgbWFpblxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgXFxcImZvb3RlciBmb290ZXJcXFwiXFxuXFxufVxcblxcbi8qIEhJREUgRUxFTUVOVFMgV0hJTEUgVE9HR0xJTkcgKi9cXG4uaW5hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5cXG4ucGFnZS1oZWFkZXIge1xcbiAgICBncmlkLWFyZWE6IGhlYWRlcjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMTJweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyODRDNztcXG59XFxuXFxuLnBhZ2UtaGVhZGVyID4gaW1nIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQ1cHg7XFxuICAgIGhlaWdodDogMTA4cHg7XFxufVxcblxcbi5zaWRlYmFyLC5tYWluIHtcXG4gICAgbWluLWhlaWdodDogMTAwdmg7XFxufVxcblxcblxcbi5zaWRlYmFyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ3JpZC1hcmVhOiBzaWRlYmFyO1xcbiAgICBtYXgtd2lkdGg6IDFmcjtcXG4gICAgbWFyZ2luLXRvcDogMzBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyODRDNztcXG59XFxuXFxuLnNpZGViYXIgKiB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuaHgge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbiNvcHRpb25zwqB7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuXFxuI3Byb2plY3QtbGlzdCB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgd29yZC1icmVhazogYnJlYWstYWxsO1xcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxufVxcblxcblxcbi8qIFByb2plY3QgdGV4dCAqL1xcblxcbiNwcm9qZWN0LWxpc3QgPiBsaSB7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuXFxuXFxuXFxuLm1haW4ge1xcbiAgICBwYWRkaW5nOiA1MHB4IDIyMHB4O1xcbiAgICBncmlkLWFyZWE6IG1haW47XFxufVxcblxcbi50b2RvLXdyYXBwZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgICBcXG59XFxuXFxuLnRvZG8td3JhcHBlciBidXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDI4NEM3O1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcXG4gICAgZm9udC13ZWlnaHQ6IDgwMDtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICBwYWRkaW5nOiA2cHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnRvZG8td3JhcHBlciBidXR0b246aG92ZXIge1xcbiAgICBjb2xvcjogIzAyODRDNztcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbi50b2RvcyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGZsZXg6IDE7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gICAgZ2FwOiA2cHg7XFxufVxcblxcbi50b2RvIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleDogMTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XFxuICAgIHBhZGRpbmc6IDBweCA4cHg7XFxufVxcblxcbiN0b2RvLXRpdGxlLCN0b2RvLWRlc2NyaXB0aW9uIHtcXG4gICAgd29yZC1icmVhazogYnJlYWstYWxsO1xcbn1cXG5cXG4jcHJpb3JpdHkge1xcbiAgICBmb250LXNpemU6IDM2cHg7XFxuICAgIGNvbG9yOiByZWQ7XFxuICAgIGZvbnQtd2VpZ2h0OiA4MDA7XFxufVxcblxcbi50b2RvLWFjdGlvbnMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDEwcHg7XFxufVxcblxcbi50b2RvLWFjdGlvbnMgaW1nIHtcXG4gICAgaGVpZ2h0OiAzMnB4O1xcbn1cXG5cXG4udG9kby1hY3Rpb25zOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5mb290ZXIge1xcbiAgICBncmlkLWFyZWE6IGZvb3RlcjtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3R0b206IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBsZWZ0OiAwO1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxuICAgIGNvbG9yOiAjZmZmXFxufVxcblxcbi5tb2RhbCB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgdG9wOiA1MCU7XFxuICAgIGxlZnQ6IDUwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwtNTAlKSBzY2FsZSgwKTtcXG4gICAgdHJhbnNpdGlvbjogMjAwbXMgZWFzZS1pbi1vdXQ7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xcbiAgICB6LWluZGV4OiAxMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIHdpZHRoOiA1MDBweDtcXG4gICAgbWF4LXdpZHRoOiA4MCU7XFxufVxcblxcbi5tb2RhbC5hY3RpdmUge1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLC01MCUpIHNjYWxlKDEpO1xcbn1cXG5cXG4ubW9kYWwtaGVhZGVyIHtcXG4gICAgcGFkZGluZzogMTBweCAxNXB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjaztcXG59XFxuXFxuLm1vZGFsLWhlYWRlciAudGl0bGUge1xcbiAgICBmb250LXNpemU6IDEuMjVyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ubW9kYWwtaGVhZGVyIC5jbG9zZS1idXR0b24ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZDogbm9uZTtcXG4gICAgZm9udC1zaXplOiAycmVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLm1vZGFsLWJvZHkge1xcbiAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XFxufVxcblxcbi5tb2RhbC1ib2R5IGZvcm0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBnYXA6IDVweDtcXG59XFxuXFxuLm1vZGFsLWJvZHkgZm9ybSBidXR0b24ge1xcbiAgICBtaW4td2lkdGg6IDEwJTtcXG4gICAgbWF4LXdpZHRoOiAyMCU7XFxufVxcblxcbiNvdmVybGF5IHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICBvcGFjaXR5OiAwOyBcXG4gICAgdG9wOiAwO1xcbiAgICBsZWZ0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC41KTtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIHRyYW5zaXRpb246IDIwMG1zIGVhc2UtaW4tb3V0O1xcbn1cXG5cXG4jb3ZlcmxheS5hY3RpdmUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICBwb2ludGVyLWV2ZW50czogYWxsO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFVBQVU7SUFDVixTQUFTO0lBQ1Qsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLDJEQUEyRDtJQUMzRCxnREFBZ0Q7SUFDaEQ7Ozs7O0FBS0o7O0FBRUEsaUNBQWlDO0FBQ2pDO0lBQ0ksYUFBYTtBQUNqQjs7O0FBR0E7SUFDSSxpQkFBaUI7SUFDakIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7OztBQUdBO0lBQ0ksYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0kscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLHFCQUFxQjtJQUNyQixxQkFBcUI7QUFDekI7OztBQUdBLGlCQUFpQjs7QUFFakI7SUFDSSxxQkFBcUI7QUFDekI7Ozs7QUFJQTtJQUNJLG1CQUFtQjtJQUNuQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7O0FBRXZCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCx1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLE9BQU87SUFDUCxlQUFlO0lBQ2YsUUFBUTtBQUNaOztBQUVBO0lBQ0ksYUFBYTtJQUNiLE9BQU87SUFDUCxtQkFBbUI7SUFDbkIsOEJBQThCO0lBQzlCLHFCQUFxQjtJQUNyQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsVUFBVTtJQUNWLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEI7QUFDSjs7QUFFQTtJQUNJLGVBQWU7SUFDZixRQUFRO0lBQ1IsU0FBUztJQUNULHdDQUF3QztJQUN4Qyw2QkFBNkI7SUFDN0IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixXQUFXO0lBQ1gsdUJBQXVCO0lBQ3ZCLFlBQVk7SUFDWixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksd0NBQXdDO0FBQzVDOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsbUJBQW1CO0lBQ25CLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsZUFBZTtJQUNmLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsUUFBUTtBQUNaOztBQUVBO0lBQ0ksY0FBYztJQUNkLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsVUFBVTtJQUNWLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixtQ0FBbUM7SUFDbkMsb0JBQW9CO0lBQ3BCLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLFVBQVU7SUFDVixtQkFBbUI7QUFDdkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaHRtbCwgYm9keSB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWlubWF4KGF1dG8sNDAwcHgpIG1pbm1heCgyNTBweCwxZnIpO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbi1jb250ZW50IDFmciAgbWluLWNvbnRlbnQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJoZWFkZXIgaGVhZGVyXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICBcXFwic2lkZWJhciBtYWluXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICBcXFwic2lkZWJhciBtYWluXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiZm9vdGVyIGZvb3RlclxcXCJcXG5cXG59XFxuXFxuLyogSElERSBFTEVNRU5UUyBXSElMRSBUT0dHTElORyAqL1xcbi5pbmFjdGl2ZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcblxcbi5wYWdlLWhlYWRlciB7XFxuICAgIGdyaWQtYXJlYTogaGVhZGVyO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAxMnB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDI4NEM3O1xcbn1cXG5cXG4ucGFnZS1oZWFkZXIgPiBpbWcge1xcbiAgICBtYXJnaW4tbGVmdDogNDVweDtcXG4gICAgaGVpZ2h0OiAxMDhweDtcXG59XFxuXFxuLnNpZGViYXIsLm1haW4ge1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuXFxuLnNpZGViYXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBncmlkLWFyZWE6IHNpZGViYXI7XFxuICAgIG1heC13aWR0aDogMWZyO1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDI4NEM3O1xcbn1cXG5cXG4uc2lkZWJhciAqIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5oeCB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuI29wdGlvbnPCoHtcXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG4jcHJvamVjdC1saXN0IHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG59XFxuXFxuXFxuLyogUHJvamVjdCB0ZXh0ICovXFxuXFxuI3Byb2plY3QtbGlzdCA+IGxpIHtcXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbn1cXG5cXG5cXG5cXG4ubWFpbiB7XFxuICAgIHBhZGRpbmc6IDUwcHggMjIwcHg7XFxuICAgIGdyaWQtYXJlYTogbWFpbjtcXG59XFxuXFxuLnRvZG8td3JhcHBlciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICAgIFxcbn1cXG5cXG4udG9kby13cmFwcGVyIGJ1dHRvbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMjg0Qzc7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICBmb250LXdlaWdodDogODAwO1xcbiAgICBmb250LXNpemU6IDI0cHg7XFxuICAgIHBhZGRpbmc6IDZweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4udG9kby13cmFwcGVyIGJ1dHRvbjpob3ZlciB7XFxuICAgIGNvbG9yOiAjMDI4NEM3O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLnRvZG9zIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZmxleDogMTtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBnYXA6IDZweDtcXG59XFxuXFxuLnRvZG8ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4OiAxO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcXG4gICAgcGFkZGluZzogMHB4IDhweDtcXG59XFxuXFxuI3RvZG8tdGl0bGUsI3RvZG8tZGVzY3JpcHRpb24ge1xcbiAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XFxufVxcblxcbiNwcmlvcml0eSB7XFxuICAgIGZvbnQtc2l6ZTogMzZweDtcXG4gICAgY29sb3I6IHJlZDtcXG4gICAgZm9udC13ZWlnaHQ6IDgwMDtcXG59XFxuXFxuLnRvZG8tYWN0aW9ucyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGdhcDogMTBweDtcXG59XFxuXFxuLnRvZG8tYWN0aW9ucyBpbWcge1xcbiAgICBoZWlnaHQ6IDMycHg7XFxufVxcblxcbi50b2RvLWFjdGlvbnM6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmZvb3RlciB7XFxuICAgIGdyaWQtYXJlYTogZm9vdGVyO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gICAgY29sb3I6ICNmZmZcXG59XFxuXFxuLm1vZGFsIHtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLC01MCUpIHNjYWxlKDApO1xcbiAgICB0cmFuc2l0aW9uOiAyMDBtcyBlYXNlLWluLW91dDtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEycHg7XFxuICAgIHotaW5kZXg6IDEwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgd2lkdGg6IDUwMHB4O1xcbiAgICBtYXgtd2lkdGg6IDgwJTtcXG59XFxuXFxuLm1vZGFsLmFjdGl2ZSB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsLTUwJSkgc2NhbGUoMSk7XFxufVxcblxcbi5tb2RhbC1oZWFkZXIge1xcbiAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xcbn1cXG5cXG4ubW9kYWwtaGVhZGVyIC50aXRsZSB7XFxuICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5tb2RhbC1oZWFkZXIgLmNsb3NlLWJ1dHRvbiB7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgICBmb250LXNpemU6IDJyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ubW9kYWwtYm9keSB7XFxuICAgIHBhZGRpbmc6IDEwcHggMTVweDtcXG59XFxuXFxuLm1vZGFsLWJvZHkgZm9ybSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGdhcDogNXB4O1xcbn1cXG5cXG4ubW9kYWwtYm9keSBmb3JtIGJ1dHRvbiB7XFxuICAgIG1pbi13aWR0aDogMTAlO1xcbiAgICBtYXgtd2lkdGg6IDIwJTtcXG59XFxuXFxuI292ZXJsYXkge1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxuICAgIG9wYWNpdHk6IDA7IFxcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgLjUpO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgdHJhbnNpdGlvbjogMjAwbXMgZWFzZS1pbi1vdXQ7XFxufVxcblxcbiNvdmVybGF5LmFjdGl2ZSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gSW4gdGhlIGJyb3dzZXIgd2UgdGhlcmVmb3JlXG4vLyByZXF1aXJlIHRoZSBjcnlwdG8gQVBJIGFuZCBkbyBub3Qgc3VwcG9ydCBidWlsdC1pbiBmYWxsYmFjayB0byBsb3dlciBxdWFsaXR5IHJhbmRvbSBudW1iZXJcbi8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuXG52YXIgZ2V0UmFuZG9tVmFsdWVzO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uIEFsc28sXG4gICAgLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbiAgICBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiLCJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiLCJpbXBvcnQge3Y0IGFzIHV1aWR2NH0gZnJvbSBcInV1aWRcIjtcblxuY2xhc3MgUHJvamVjdCB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLmlkID0gdXVpZHY0KClcbiAgICAgICAgdGhpcy5wcm9qZWN0X3RvZG9zID0gbmV3IE9iamVjdCgpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgfVxuXG4gICAgc3RvcmVQcm9qZWN0KCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmlkLCBKU09OLnN0cmluZ2lmeSh0aGlzKSk7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgcHVzaFRvZG8odG9kbyl7XG4gICAgICAgIHRoaXMucHJvamVjdF90b2Rvc1t0b2RvW1wiaWRcIl1dID0gSlNPTi5zdHJpbmdpZnkodG9kbylcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5pZCwgSlNPTi5zdHJpbmdpZnkodGhpcykpXG5cbiAgICB9O1xufVxuXG5jbGFzcyBUb2RvIHtcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSxkZXNjcmlwdGlvbixkYXRlLHByaW9yaXR5LHN0YXR1cz1cInVuZmluaXNoZWRcIil7XG4gICAgICAgIHRoaXMuaWQgPSB1dWlkdjQoKVxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c1xuICAgIH1cblxufVxuXG4vKlxuY29uc3QgVG9kbyA9ICh0aXRsZSxkZXNjcmlwdGlvbixkYXRlLHByaW9yaXR5LHN0YXR1cz1cInVuZmluaXNoZWRcIikgPT4ge1xuXG4gICAgY29uc3QgaWQgPSB1dWlkdjQoKVxuXG4gICAgY29uc3Qgc3RvcmVUb2RvID0gKCkgPT7CoHtcblxuICAgICAgICBjb25zdCB0b2RvX3N0b3JhZ2UgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiVG9kb3NcIikpO1xuICAgICAgICBjb25zdCB0b2RvID0ge2lkLHRpdGxlLGRlc2NyaXB0aW9uLGRhdGUscHJpb3JpdHksc3RhdHVzfTtcbiAgICAgICAgdG9kb19zdG9yYWdlLnB1c2godG9kbyk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiVG9kb3NcIiwgSlNPTi5zdHJpbmdpZnkodG9kb19zdG9yYWdlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtpZCx0aXRsZSxkZXNjcmlwdGlvbixkYXRlLHByaW9yaXR5LHN0YXR1cyxzdG9yZVRvZG99XG59XG5cbiovXG5cbmV4cG9ydCB7UHJvamVjdCxUb2RvfVxuIiwiaW1wb3J0IHsgUHJvamVjdCxUb2RvIH0gZnJvbSBcIi4vdG9kb0NsYXNzZXNcIjtcblxuXG5mdW5jdGlvbiByZXNldFN0b3JhZ2UoKSB7XG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKClcbn1cblxuLy8gR2VuZXJhdGVzIGFuIGFycmF5IG9mIGV2ZXJ5IFRPRE8gXG5mdW5jdGlvbiBnZXRBbGxUb2RvcygpIHtcbiAgICBjb25zdCB0b2RvX2FyciA9IFtdXG5cbiAgICBmb3IgKGxldCBwcm9qZWN0IG9mIGdldEFsbFByb2plY3RzKCkpIHtcbiAgICAgICAgZm9yIChsZXQgdG9kb19rZXkgb2YgT2JqZWN0LmtleXMocHJvamVjdC5wcm9qZWN0X3RvZG9zKSApIHtcbiAgICAgICAgICAgIHRvZG9fYXJyLnB1c2goSlNPTi5wYXJzZShwcm9qZWN0LnByb2plY3RfdG9kb3NbdG9kb19rZXldKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0b2RvX2FyclxuXG59XG5cblxuLy8gR2VuZXJhdGVzIGFuIGFycmF5IG9mIGV2ZXJ5IFByb2plY3RcbmZ1bmN0aW9uIGdldEFsbFByb2plY3RzKCkge1xuICAgIGxldCBhcnIgPSBbXSAgICBcblxuICAgIE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGFyci5wdXNoKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSkpXG4gICAgfSlcbiAgICByZXR1cm4gYXJyXG5cbn1cblxuLy8gR3JhYnMgYSBwcm9qZWN0IHdpdGggYSBzcGVjaWZpYyBJRFxuZnVuY3Rpb24gZ2V0UHJvamVjdChwcm9qZWN0X2lkKSB7XG4gICAgZm9yIChsZXQgcHJvamVjdCBvZiBnZXRBbGxQcm9qZWN0cygpKSB7XG4gICAgICAgIGlmIChwcm9qZWN0LmlkID09PSBwcm9qZWN0X2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvamVjdFxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vR3JhYnMgYSB0b2RvIHdpdGggYSBzcGVjaWZpYyBJRFxuZnVuY3Rpb24gZ2V0VG9kbyh0b2RvX2lkKSB7XG4gICAgZm9yIChsZXQgdG9kbyBvZiBnZXRBbGxUb2RvcygpKSB7XG4gICAgICAgIGlmICh0b2RvLmlkID09PSB0b2RvX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRvZG8pXG4gICAgICAgIH1cbiAgICB9ICAgIFxufVxuXG5cbi8vIEdlbmVyYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBvZiB0aGUgcHJvamVjdMK0cyB0b2RvIE9iamVjdHMuXG5cblxuZnVuY3Rpb24gZ2V0UHJvamVjdFRvZG9zKHByb2plY3RfaWQpIHtcbiAgICBsZXQgcHJvamVjdF90b2RvcyA9IFtdXG4gICAgbGV0IHRvZG9fa2V5cyA9IE9iamVjdC5rZXlzKGdldFByb2plY3QocHJvamVjdF9pZCkucHJvamVjdF90b2RvcylcbiAgICB0b2RvX2tleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIHByb2plY3RfdG9kb3MucHVzaChKU09OLnBhcnNlKGdldFByb2plY3QocHJvamVjdF9pZCkucHJvamVjdF90b2Rvc1trZXldKSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHByb2plY3RfdG9kb3NcblxufVxuXG5mdW5jdGlvbiBkZWZhdWxTdG9yYWdlICgpIHtcbiAgICByZXNldFN0b3JhZ2UoKVxuXG4gICAgbGV0IHAxID0gbmV3IFByb2plY3QoXCJQcm9qZWN0MVwiKVxuICAgIGxldCBwMiA9IG5ldyBQcm9qZWN0KFwiUHJvamVjdDJcIilcblxuICAgIGxldCB0b2RvMSA9IG5ldyBUb2RvKFwiVG9kbzFcIixcIkZpcnN0IHRvZG9cIiwgXCIyMDIyLTEyLTMxXCIsXCJub3JtYWxcIik7XG4gICAgbGV0IHRvZG8yID0gbmV3IFRvZG8oXCJUb2RvMlwiLCBcIlNlY29uZCB0b2RvXCIsIFwiMTkzOS0wOS0wMVwiLFwidXJnZW50XCIpO1xuXG4gICAgcDEuc3RvcmVQcm9qZWN0KCk7XG4gICAgcDIuc3RvcmVQcm9qZWN0KCk7XG4gICAgcDEucHVzaFRvZG8odG9kbzEpO1xuICAgIHAxLnB1c2hUb2RvKHRvZG8yKTtcbiAgICBwMi5wdXNoVG9kbyh0b2RvMSk7XG5cbn1cblxuZXhwb3J0IHtnZXRBbGxUb2RvcywgZ2V0QWxsUHJvamVjdHMsIGdldFByb2plY3QsIGdldFRvZG8sIHJlc2V0U3RvcmFnZSwgZGVmYXVsU3RvcmFnZSwgZ2V0UHJvamVjdFRvZG9zfSIsImltcG9ydCB7IGdldEFsbFRvZG9zLGdldEFsbFByb2plY3RzLGdldFByb2plY3QsIGdldFByb2plY3RUb2RvcyB9IGZyb20gXCIuL3N0b3JhZ2VcIlxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgXG59KVxuXG5jb25zdCBUT0RPX0xJU1QgPSBnZXRBbGxUb2RvcygpO1xuXG5cblxuXG4vLyBDbGVhcnMgdGhlIGNvbnRlbnQgb2YgYW4gSFRNTCBlbGVtZW50XG5jb25zdCBoaWRlU2VjdGlvbiA9IChzZWN0aW9uKSA9PiB7XG4gICAgaWYoc2VjdGlvbi5jbGFzc05hbWUgPT09IFwiYWN0aXZlXCIpIHtcbiAgICAgICAgc2VjdGlvbi5jbGFzc05hbWUgPSBcImluYWN0aXZlXCJcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWN0aW9uLmNsYXNzTmFtZSA9IFwiYWN0aXZlXCJcbiAgICB9XG59XG5cblxuY29uc3QgY2xlYXJTZWN0aW9uID0gIChzZWN0aW9uID0gVE9ET1NfSFRNTCkgPT4ge1xuICAgIGNvbnN0IFRPRE9TX0hUTUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG9zXCIpXG4gICAgd2hpbGUgKHNlY3Rpb24uZmlyc3RDaGlsZCkge1xuICAgICAgICBzZWN0aW9uLnJlbW92ZUNoaWxkKHNlY3Rpb24ubGFzdENoaWxkKVxuICAgIH1cbn1cblxuY29uc3QgZ2VuZXJhdGVBbGxUb2RvcyA9ICh0b2RvX2xpc3QgPSBnZXRBbGxUb2RvcygpKSA9PsKge1xuICAgIGNvbnN0IFRPRE9TX0hUTUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG9zXCIpO1xuXG4gICAgY2xlYXJTZWN0aW9uKFRPRE9TX0hUTUwpO1xuXG4gICAgdG9kb19saXN0LmZvckVhY2goKHRvZG8pID0+IHtcbiAgICAgICAgY29uc3QgdG9kb19kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0b2RvX2Rpdi5jbGFzc05hbWUgPSBcInRvZG9cIjtcbiAgICAgICAgdG9kb19kaXYuaWQgPSB0b2RvLmlkXG5cbiAgICAgICAgY29uc3QgdG9kb19wcmlvcml0eV9lbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHRvZG9fcHJpb3JpdHlfZWxlbS5pZCA9IFwicHJpb3JpdHlcIjtcbiAgICAgICAgaWYgKHRvZG8ucHJpb3JpdHkgPT09IFwidXJnZW50XCIpIHtcbiAgICAgICAgICAgIHRvZG9fcHJpb3JpdHlfZWxlbS50ZXh0Q29udGVudCA9IFwiIVwiXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b2RvX3RpdGxlX2VsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgIHRvZG9fdGl0bGVfZWxlbS5pZCA9IFwidG9kby10aXRsZVwiO1xuICAgICAgICB0b2RvX3RpdGxlX2VsZW0udGV4dENvbnRlbnQgPSB0b2RvLnRpdGxlXG5cbiAgICAgICAgY29uc3QgdG9kb19kZXNjcmlwdGlvbl9lbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHRvZG9fZGVzY3JpcHRpb25fZWxlbS5pZCA9IFwidG9kby1kZXNjcmlwdGlvblwiXG4gICAgICAgIHRvZG9fZGVzY3JpcHRpb25fZWxlbS50ZXh0Q29udGVudCA9IHRvZG8uZGVzY3JpcHRpb25cblxuICAgICAgICBjb25zdCB0b2RvX2RhdGVfZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICB0b2RvX2RhdGVfZWxlbS5pZCA9IFwidG9kb1wiO1xuICAgICAgICB0b2RvX2RhdGVfZWxlbS50ZXh0Q29udGVudCA9IHRvZG8uZGF0ZTtcblxuICAgICAgICBjb25zdCB0b2RvX2FjdGlvbnNfZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdG9kb19hY3Rpb25zX2Rpdi5jbGFzc05hbWUgPSBcInRvZG8tYWN0aW9uc1wiO1xuXG4gICAgICAgIC8vIFRPRE8gcHJvYmFibHkgd2lsbCBuZWVkIHRvIGNoYW5nZSB0aGUgSU1HIHNyY1xuXG4gICAgICAgIGNvbnN0IGVkaXRfZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIilcbiAgICAgICAgZWRpdF9lbGVtZW50LmlkID0gXCJlZGl0LXRvZG9cIlxuICAgICAgICBlZGl0X2VsZW1lbnQuc2V0QXR0cmlidXRlKFwic3JjXCIsXCJlZGl0LnBuZ1wiKTtcbiAgICAgICAgZWRpdF9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFsdFwiLCBcIkVkaXRcIilcblxuICAgICAgICBjb25zdCBkZWxldGVfZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIilcbiAgICAgICAgZGVsZXRlX2VsZW1lbnQuaWQgPSBcImRlbC10b2RvXCJcbiAgICAgICAgZGVsZXRlX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwic3JjXCIsXCJkZWxldGUucG5nXCIpO1xuICAgICAgICBkZWxldGVfZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgXCJEZWxldGVcIilcblxuICAgICAgICB0b2RvX2FjdGlvbnNfZGl2LmFwcGVuZENoaWxkKGVkaXRfZWxlbWVudCk7XG4gICAgICAgIHRvZG9fYWN0aW9uc19kaXYuYXBwZW5kQ2hpbGQoZGVsZXRlX2VsZW1lbnQpXG5cbiAgICAgICAgdG9kb19kaXYuYXBwZW5kQ2hpbGQodG9kb19wcmlvcml0eV9lbGVtKTtcbiAgICAgICAgdG9kb19kaXYuYXBwZW5kQ2hpbGQodG9kb190aXRsZV9lbGVtKTtcbiAgICAgICAgdG9kb19kaXYuYXBwZW5kQ2hpbGQodG9kb19kZXNjcmlwdGlvbl9lbGVtKTtcbiAgICAgICAgdG9kb19kaXYuYXBwZW5kQ2hpbGQodG9kb19kYXRlX2VsZW0pXG4gICAgICAgIHRvZG9fZGl2LmFwcGVuZENoaWxkKHRvZG9fYWN0aW9uc19kaXYpXG5cblxuXG4gICAgICAgIFRPRE9TX0hUTUwuYXBwZW5kQ2hpbGQodG9kb19kaXYpO1xuXG4gICAgfSlcblxufVxuXG5jb25zdCBnZW5lcmF0ZUFsbFByb2plY3RzID0gICgpID0+IHtcblxuICAgIGNvbnN0IFRPRE9TX0hUTUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvZG9zXCIpXG4gICAgXG4gICAgY29uc3QgUFJPSkVDVFNfSFRNTCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdC1saXN0XCIpO1xuXG4gICAgY29uc3QgUFJPSkVDVF9MSVNUID0gZ2V0QWxsUHJvamVjdHMoKVxuXG4gICAgY2xlYXJTZWN0aW9uKFBST0pFQ1RTX0hUTUwpO1xuXG4gICAgY29uc3QgbmV3X3Byb2plY3RfYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBuZXdfcHJvamVjdF9idXR0b24uaWQgPSBcIm5ldy1wcm9qZWN0LWJ0blwiXG4gICAgbmV3X3Byb2plY3RfYnV0dG9uLnRleHRDb250ZW50ID0gXCJOZXcgUHJvamVjdFwiO1xuICAgIFBST0pFQ1RTX0hUTUwuYXBwZW5kQ2hpbGQobmV3X3Byb2plY3RfYnV0dG9uKVxuXG4gICAgUFJPSkVDVF9MSVNULmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdF9pdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBwcm9qZWN0X2l0ZW0udGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWU7XG4gICAgICAgIHByb2plY3RfaXRlbS5pZCA9IHByb2plY3QuaWRcblxuXG4gICAgICAgIC8vIFRPRE8gT1BFTiBUSEUgUFJPSkVDVCAmIEdFTkVSQVRFIElUUyBUT0RPU1xuICAgICAgICBwcm9qZWN0X2l0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RfdG9kb3MgPSBnZXRQcm9qZWN0VG9kb3MocHJvamVjdC5pZClcblxuXG4gICAgICAgICAgICBnZW5lcmF0ZUFsbFRvZG9zKHByb2plY3RfdG9kb3MpXG5cbiAgICAgICAgICAgIC8vIGNoYW5nZXMgdGhlIHRpdGxlIG9mIHRoZSB0b2Rvc190aXRsZSBmaWVsZFxuICAgICAgICAgICAgY29uc3QgdG9kb3NfdGl0bGVfaHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9kb3MtdGl0bGVcIilcbiAgICAgICAgICAgIHRvZG9zX3RpdGxlX2h0bWwudGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWVcbiAgICAgICAgXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBQUk9KRUNUU19IVE1MLmFwcGVuZENoaWxkKHByb2plY3RfaXRlbSlcblxuICAgIH0pXG59XG5cbmNvbnN0IGdlbmVyYXRlUHJvamVjdFRvZG9zID0gKHByb2plY3QpID0+IHtcbiAgICBjb25zdCBUT0RPU19IVE1MID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50b2Rvc1wiKVxuICAgIGNvbnN0IHByb2plY3RfdG9kb3MgPSBwcm9qZWN0LnByb2plY3RfdG9kb3M7XG4gICAgZ2VuZXJhdGVBbGxUb2Rvcyhwcm9qZWN0X3RvZG9zKVxufVxuICAgICAgICAvLyBUT0RPIEhUTUwgc3RydWN0dXJlXG4gICAgICAgICAgICAvKlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvZG9cIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJwcmlvcml0eVwiPiE8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxoMyBpZD1cInRvZG8tdGl0bGVcIj5UaXRsZTwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVwidG9kby1kZXNjcmlwdGlvblwiPlRoaXMgaXMgYSB0ZXN0PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD1cInRvZG8tZGF0ZVwiPjIwMjIuMDYuMTI8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b2RvLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiZWRpdC5wbmdcIiBhbHQ9XCJFZGl0XCIgaWQ9XCJlZGl0LXRvZG9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiZGVsZXRlLnBuZ1wiIGFsdD1cIkRlbGV0ZSBUb2RvXCIgaWQ9XCJkZWwtdG9kb1wiPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAqL1xuXG5leHBvcnQge2dlbmVyYXRlQWxsVG9kb3MsIGdlbmVyYXRlQWxsUHJvamVjdHMsIGhpZGVTZWN0aW9ufSIsImltcG9ydCBcIi4vc3R5bGVzL3N0eWxlLmNzc1wiXG5pbXBvcnQge1RvZG8sUHJvamVjdH0gZnJvbSBcIi4vZnVuY3Rpb25zL3RvZG9DbGFzc2VzLmpzXCJcbmltcG9ydCB7Z2V0QWxsVG9kb3MsIGdldEFsbFByb2plY3RzLCBnZXRQcm9qZWN0LCBnZXRUb2RvLCByZXNldFN0b3JhZ2UsIGdldFByb2plY3RUb2RvcywgZGVmYXVsU3RvcmFnZX0gZnJvbSBcIi4vZnVuY3Rpb25zL3N0b3JhZ2UuanNcIlxuaW1wb3J0IHtnZW5lcmF0ZUFsbFRvZG9zLGdlbmVyYXRlQWxsUHJvamVjdHMsIGhpZGVTZWN0aW9ufSBmcm9tIFwiLi9mdW5jdGlvbnMvRE9NRnVuY3Rpb25zLmpzXCJcblxuLy8gbGVsXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcblxuICAgIGRlZmF1bFN0b3JhZ2UoKVxuXG4gICAgY29uc29sZS5sb2coXCJQcm9qZWN0c1wiKVxuICAgIGNvbnNvbGUubG9nKGdldEFsbFByb2plY3RzKClbMF0ucHJvamVjdF90b2RvcylcblxuICAgIGNvbnNvbGUubG9nKFwiUHJvamVjdCBUb2Rvc1wiKVxuICAgIGNvbnNvbGUubG9nKGdldFByb2plY3RUb2RvcyhnZXRBbGxQcm9qZWN0cygpWzBdLmlkKSlcblxuICAgIGNvbnNvbGUubG9nKFwiVG9kb3NcIilcbiAgICBjb25zb2xlLmxvZyhnZXRBbGxUb2RvcygpKVxuXG5cblxuICAgIGdlbmVyYXRlQWxsUHJvamVjdHMoKVxuXG5cbiAgICBjb25zdCBzaWRlYmFyX3RvZG9zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaWRlYmFyLXRvZG9zXCIpXG4gICAgY29uc3QgcHJvamVjdHNfaHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdHNcIik7XG5cblxuICAgIGNvbnN0IFBST0pFQ1RfTElTVF9IVE1MID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0LWxpc3RcIilcbiAgICBjb25zdCBQUk9KRUNUX0xJU1RfSVRFTVMgPSBQUk9KRUNUX0xJU1RfSFRNTC5xdWVyeVNlbGVjdG9yQWxsKFwibGlcIilcblxuICAgIGNvbnNvbGUubG9nKFBST0pFQ1RfTElTVF9IVE1MKVxuXG5cbiAgICBwcm9qZWN0c19odG1sLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGhpZGVTZWN0aW9uKFBST0pFQ1RfTElTVF9IVE1MKVxuICAgIH0pXG5cbiAgICBzaWRlYmFyX3RvZG9zLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGdlbmVyYXRlQWxsVG9kb3MoKVxuICAgICAgICBjb25zdCB0b2Rvc190aXRsZV9odG1sID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2Rvcy10aXRsZVwiKVxuICAgICAgICB0b2Rvc190aXRsZV9odG1sLnRleHRDb250ZW50ID0gXCJFdmVyeSBUb2Rvc1wiXG4gICAgfSlcblxuICAgIFxuICAgIGNvbnNvbGUubG9nKFBST0pFQ1RfTElTVF9JVEVNUylcbiAgICBcblxuICAgIGdlbmVyYXRlQWxsVG9kb3MoKTtcbn0pXG5cblxuXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiY3J5cHRvIiwiYmluZCIsIm1zQ3J5cHRvIiwidXVpZCIsImJ5dGVUb0hleCIsInN1YnN0ciIsImJ1ZiIsIm9mZnNldCIsInJuZHMiLCJyYW5kb20iLCJhcnIiLCJhcmd1bWVudHMiLCJ0b0xvd2VyQ2FzZSIsIlR5cGVFcnJvciIsIlByb2plY3QiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9qZWN0X3RvZG9zIiwic3RvcmVQcm9qZWN0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInB1c2hUb2RvIiwidG9kbyIsIlRvZG8iLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZGF0ZSIsInByaW9yaXR5Iiwic3RhdHVzIiwiZ2V0QWxsVG9kb3MiLCJ0b2RvX2FyciIsInByb2plY3QiLCJnZXRBbGxQcm9qZWN0cyIsInRvZG9fa2V5Iiwia2V5cyIsInBhcnNlIiwiZm9yRWFjaCIsImdldEl0ZW0iLCJnZXRQcm9qZWN0IiwicHJvamVjdF9pZCIsImdldFByb2plY3RUb2RvcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGVhclNlY3Rpb24iLCJzZWN0aW9uIiwiVE9ET1NfSFRNTCIsImxhc3RDaGlsZCIsImdlbmVyYXRlQWxsVG9kb3MiLCJ0b2RvX2xpc3QiLCJ0b2RvX2RpdiIsImNsYXNzTmFtZSIsInRvZG9fcHJpb3JpdHlfZWxlbSIsInRleHRDb250ZW50IiwidG9kb190aXRsZV9lbGVtIiwidG9kb19kZXNjcmlwdGlvbl9lbGVtIiwidG9kb19kYXRlX2VsZW0iLCJ0b2RvX2FjdGlvbnNfZGl2IiwiZWRpdF9lbGVtZW50IiwiZGVsZXRlX2VsZW1lbnQiLCJjbGVhciIsInAxIiwicDIiLCJ0b2RvMSIsInRvZG8yIiwiZGVmYXVsU3RvcmFnZSIsImNvbnNvbGUiLCJsb2ciLCJQUk9KRUNUU19IVE1MIiwiZ2V0RWxlbWVudEJ5SWQiLCJQUk9KRUNUX0xJU1QiLCJuZXdfcHJvamVjdF9idXR0b24iLCJwcm9qZWN0X2l0ZW0iLCJnZW5lcmF0ZUFsbFByb2plY3RzIiwic2lkZWJhcl90b2RvcyIsInByb2plY3RzX2h0bWwiLCJQUk9KRUNUX0xJU1RfSFRNTCIsIlBST0pFQ1RfTElTVF9JVEVNUyIsInF1ZXJ5U2VsZWN0b3JBbGwiXSwic291cmNlUm9vdCI6IiJ9