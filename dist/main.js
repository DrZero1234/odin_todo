(()=>{"use strict";var n={890:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,'html, body {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: minmax(auto,400px) minmax(250px,1fr);\n    grid-template-rows: min-content 1fr  min-content;\n    grid-template-areas: "header header"\n                         "sidebar main"\n                         "sidebar main"\n                         "footer footer"\n\n}\n\n\n.page-header {\n    grid-area: header;\n    display: flex;\n    align-items: center;\n    padding: 12px;\n    background-color: #0284C7;\n}\n\n.page-header > img {\n    margin-left: 45px;\n    height: 108px;\n}\n\n.sidebar,.main {\n    min-height: 100vh;\n}\n\n\n.sidebar {\n    display: flex;\n    grid-area: sidebar;\n    max-width: 1fr;\n    margin-top: 30px;\n    background-color: #0284C7;\n}\n\n#options {\n    list-style-type: none;\n}\n\n#projects {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    word-break: break-all;\n    list-style-type: none;\n}\n\n\n/* Project text */\n\n#projects > li {\n}\n\n\n\n.main {\n\n    border: 2px solid black;\n    padding: 40px;\n    grid-area: main;\n}\n\n.todos {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: 6px;\n}\n\n.todo {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border: 2px solid red;\n    padding: 0px 8px;\n\n}\n\n.todo-actions {\n    display: flex;\n    gap: 10px;\n}\n\n.todo-actions img {\n    height: 32px;\n}\n\n.todo-actions:hover {\n    cursor: pointer;\n}\n\nfooter {\n    grid-area: footer;\n    position: relative;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    padding: 20px;\n    text-align: center;\n    background-color: #000;\n    color: #fff\n}',"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,2DAA2D;IAC3D,gDAAgD;IAChD;;;;;AAKJ;;;AAGA;IACI,iBAAiB;IACjB,aAAa;IACb,mBAAmB;IACnB,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,iBAAiB;AACrB;;;AAGA;IACI,aAAa;IACb,kBAAkB;IAClB,cAAc;IACd,gBAAgB;IAChB,yBAAyB;AAC7B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,eAAe;IACf,qBAAqB;IACrB,qBAAqB;AACzB;;;AAGA,iBAAiB;;AAEjB;AACA;;;;AAIA;;IAEI,uBAAuB;IACvB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,OAAO;IACP,QAAQ;AACZ;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,qBAAqB;IACrB,gBAAgB;;AAEpB;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,OAAO;IACP,aAAa;IACb,kBAAkB;IAClB,sBAAsB;IACtB;AACJ",sourcesContent:['html, body {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.container {\n    display: grid;\n    grid-template-columns: minmax(auto,400px) minmax(250px,1fr);\n    grid-template-rows: min-content 1fr  min-content;\n    grid-template-areas: "header header"\n                         "sidebar main"\n                         "sidebar main"\n                         "footer footer"\n\n}\n\n\n.page-header {\n    grid-area: header;\n    display: flex;\n    align-items: center;\n    padding: 12px;\n    background-color: #0284C7;\n}\n\n.page-header > img {\n    margin-left: 45px;\n    height: 108px;\n}\n\n.sidebar,.main {\n    min-height: 100vh;\n}\n\n\n.sidebar {\n    display: flex;\n    grid-area: sidebar;\n    max-width: 1fr;\n    margin-top: 30px;\n    background-color: #0284C7;\n}\n\n#options {\n    list-style-type: none;\n}\n\n#projects {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    word-break: break-all;\n    list-style-type: none;\n}\n\n\n/* Project text */\n\n#projects > li {\n}\n\n\n\n.main {\n\n    border: 2px solid black;\n    padding: 40px;\n    grid-area: main;\n}\n\n.todos {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: 6px;\n}\n\n.todo {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border: 2px solid red;\n    padding: 0px 8px;\n\n}\n\n.todo-actions {\n    display: flex;\n    gap: 10px;\n}\n\n.todo-actions img {\n    height: 32px;\n}\n\n.todo-actions:hover {\n    cursor: pointer;\n}\n\nfooter {\n    grid-area: footer;\n    position: relative;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    padding: 20px;\n    text-align: center;\n    background-color: #000;\n    color: #fff\n}'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);o&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var d=n[s],c=o.base?d[0]+o.base:d[0],A=a[c]||0,l="".concat(c," ").concat(A);a[c]=A+1;var p=t(l),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:l,updater:m,references:1})}i.push(l)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var d=o(n,r),c=0;c<a.length;c++){var A=t(a[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=d}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),a=t(569),i=t.n(a),s=t(565),d=t.n(s),c=t(216),A=t.n(c),l=t(589),p=t.n(l),u=t(890),m={};m.styleTagTransform=p(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=A(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;var f,g=new Uint8Array(16);function C(){if(!f&&!(f="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return f(g)}const h=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,y=function(n){return"string"==typeof n&&h.test(n)};for(var I=[],x=0;x<256;++x)I.push((x+256).toString(16).substr(1));const b=function(n,e,t){var o=(n=n||{}).random||(n.rng||C)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){t=t||0;for(var r=0;r<16;++r)e[t+r]=o[r];return e}return function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(I[n[e+0]]+I[n[e+1]]+I[n[e+2]]+I[n[e+3]]+"-"+I[n[e+4]]+I[n[e+5]]+"-"+I[n[e+6]]+I[n[e+7]]+"-"+I[n[e+8]]+I[n[e+9]]+"-"+I[n[e+10]]+I[n[e+11]]+I[n[e+12]]+I[n[e+13]]+I[n[e+14]]+I[n[e+15]]).toLowerCase();if(!y(t))throw TypeError("Stringified UUID is invalid");return t}(o)},B=n=>{let e=[],t=b();const o=()=>{const r=JSON.parse(localStorage.getItem("Projects")),a={id:t,name:n,project_todos:e,addProject:o};r.push(a),localStorage.setItem("Projects",JSON.stringify(r))};return{id:t,name:n,project_todos:e,addProject:o}},v=(n,e,t,o,r="unfinised")=>{const a=b();return{id:a,title:n,description:e,date:t,priority:o,status:r,addTodo:()=>{const i=JSON.parse(localStorage.getItem("Todos")),s={id:a,title:n,description:e,date:t,priority:o,status:r};i.push(s),localStorage.setItem("Todos",JSON.stringify(i))}}};function E(){return JSON.parse(localStorage.getItem("Todos"))}const j=E();document.addEventListener("DOMContentLoaded",(()=>{const n=document.getElementById("sidebar-todos");document.getElementById("projects").addEventListener("click",(()=>{console.log("clicked projects")})),localStorage.setItem("Projects",JSON.stringify([])),localStorage.setItem("Todos",JSON.stringify([]));const e=B("Project1"),t=B("Project2"),o=v("Todo1","First todo","2022-06-12","normal"),r=v("Todo2","Second todo","2022-06-12","urgent");o.addTodo(),r.addTodo(),e.addProject(),t.addProject(),n.addEventListener("click",(()=>{(()=>{const n=document.querySelector(".todos");console.log(n),(n=>{for(;n.firstChild;)n.removeChild(n.lastChild)})(n),j.forEach((e=>{const t=document.createElement("div");t.className="todo";const o=document.createElement("span");o.id="priority","urgent"===e.priority&&(o.textContent="!");const r=document.createElement("h3");r.id="todo-title",r.textContent=e.title;const a=document.createElement("span");a.id="todo-description",a.textContent=e.description;const i=document.createElement("span");i.id="todo",i.textContent=e.date;const s=document.createElement("div");s.className="todo-actions";const d=document.createElement("img");d.id="edit-todo",d.setAttribute("src","edit.png"),d.setAttribute("alt","Edit");const c=document.createElement("img");c.id="del-todo",c.setAttribute("src","delete.png"),c.setAttribute("alt","Delete"),s.appendChild(d),s.appendChild(c),t.appendChild(o),t.appendChild(r),t.appendChild(a),t.appendChild(i),t.appendChild(s),n.appendChild(t)}))})()}))})),console.log(E()),JSON.parse(localStorage.getItem("Projects"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,